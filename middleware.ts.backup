import { clerkMiddleware } from "@clerk/nextjs/server";
import { NextRequest, NextFetchEvent } from "next/server";

// Define public paths that don't require authentication
const publicPaths = ['/sign-in', '/sign-up', '/', '/about', '/contact'];

function isPublicPath(pathname: string): boolean {
  return publicPaths.some(path => pathname === path || pathname.startsWith(path + '/'));
}

// Check if we have valid Clerk environment variables
const hasValidClerkKeys = () => {
  const publishableKey = process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY;
  return publishableKey && 
         publishableKey !== 'pk_test_placeholder-replace-with-real-key' &&
         publishableKey.startsWith('pk_');
};

export const config = {
  // Matches all routes except for static files and Next.js internals
  matcher: ["/((?!.+\\.[\\w]+$|_next).*)", "/", "/(api|trpc)(.*)"],
};
export default function middleware(req: NextRequest, event: NextFetchEvent) {
  // If no valid Clerk keys, skip authentication
  if (!hasValidClerkKeys()) {
    return;
  }

  // Use Clerk middleware
  return clerkMiddleware(async (auth, req) => {
    // Skip Clerk for the debug page to avoid static generation issues
    if (req.nextUrl.pathname.startsWith('/clerk-debug')) {
      return;
    }
    
    // Skip auth for public paths
    if (isPublicPath(req.nextUrl.pathname)) {
      return;
    }
    
    // Optional: Add any logic to run before the route handler
    // For example, redirecting unauthenticated users
    // if (!auth.userId && !isPublicPath(req.nextUrl.pathname)) {
    //   const signInUrl = new URL('/sign-in', req.url);
    //   signInUrl.searchParams.set('redirect_url', req.url);
    //   return Response.redirect(signInUrl);
    // }
  })(req);
}
